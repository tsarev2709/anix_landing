import React, { useState, useEffect, useRef } from 'react';
import './App.css';

const AnixAILanding = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [currentStep, setCurrentStep] = useState(-1);
  const [counters, setCounters] = useState({ projects: 0, hours: 0 });
  const [showVideoModal, setShowVideoModal] = useState(false);
  const [selectedVideo, setSelectedVideo] = useState(null);
  const [showQRCode, setShowQRCode] = useState(false);
  const [expandedPackage, setExpandedPackage] = useState(null);
  const [activeFAQ, setActiveFAQ] = useState(null);
  const [processInView, setProcessInView] = useState(false);
  const [processStarted, setProcessStarted] = useState(false);
  
  const heroRef = useRef(null);
  const processRef = useRef(null);
  const particlesRef = useRef(null);
  const awardsScrollRef = useRef(null);

  // Animated counter effect
  useEffect(() => {
    const animateCounters = () => {
      const duration = 2000;
      const projectsTarget = 150;
      const hoursTarget = 5000;
      
      const startTime = Date.now();
      
      const updateCounters = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const easeOut = 1 - Math.pow(1 - progress, 3);
        
        setCounters({
          projects: Math.floor(projectsTarget * easeOut),
          hours: Math.floor(hoursTarget * easeOut)
        });
        
        if (progress < 1) {
          requestAnimationFrame(updateCounters);
        }
      };
      
      updateCounters();
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          animateCounters();
        }
      });
    });

    if (processRef.current) {
      observer.observe(processRef.current);
    }

    return () => observer.disconnect();
  }, []);

  // Enhanced Process Animation System
  useEffect(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !processStarted) {
          setProcessInView(true);
          setProcessStarted(true);
          
          // Reset and start the animation sequence
          setCurrentStep(-1);
          
          const startProcessAnimation = () => {
            // Initial delay before starting
            setTimeout(() => {
              let stepIndex = 0;
              
              const animateStep = () => {
                if (stepIndex < processSteps.length) {
                  setCurrentStep(stepIndex);
                  stepIndex++;
                  
                  // Longer delay between steps for dramatic effect
                  setTimeout(animateStep, 2000);
                }
              };
              
              animateStep();
            }, 800);
          };
          
          startProcessAnimation();
        }
      });
    }, { threshold: 0.2 });

    if (processRef.current) {
      observer.observe(processRef.current);
    }

    return () => observer.disconnect();
  }, [processStarted]);

  // Neural network particle animation
  useEffect(() => {
    const canvas = particlesRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    
    const particles = [];
    
    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.vx = (Math.random() - 0.5) * 0.5;
        this.vy = (Math.random() - 0.5) * 0.5;
        this.size = Math.random() * 3 + 1;
      }
      
      update() {
        this.x += this.vx;
        this.y += this.vy;
        
        if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
        if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
      }
      
      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(139, 69, 255, 0.8)';
        ctx.fill();
        
        const gradient = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size * 3);
        gradient.addColorStop(0, 'rgba(139, 69, 255, 0.6)');
        gradient.addColorStop(1, 'rgba(139, 69, 255, 0)');
        ctx.fillStyle = gradient;
        ctx.fill();
      }
    }
    
    for (let i = 0; i < 80; i++) {
      particles.push(new Particle());
    }
    
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });
      
      // Draw connections
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 100) {
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.strokeStyle = `rgba(139, 69, 255, ${1 - distance / 100})`;
            ctx.lineWidth = 0.5;
            ctx.stroke();
          }
        }
      }
      
      requestAnimationFrame(animate);
    };
    
    animate();
    
    const handleResize = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  // Process steps with enhanced data
  const processSteps = [
    { 
      title: '–ê–Ω–∞–ª–∏–∑ –°—Ü–µ–Ω–∞—Ä–∏—è', 
      icon: 'üìù', 
      description: '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –±—Ä–∏—Ñ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ', 
      time: '2 —á–∞—Å–∞', 
      saved: '75%', 
      details: ['–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∏—Ñ–∞', '–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è'],
      color: '#8b45ff',
      bgGradient: 'linear-gradient(135deg, #8b45ff, #b465ff)'
    },
    { 
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–ª—é—á–µ–≤—ã—Ö –ö–∞–¥—Ä–æ–≤', 
      icon: 'üéØ', 
      description: '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã', 
      time: '4 —á–∞—Å–∞', 
      saved: '60%', 
      details: ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤', '–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–∏–Ω–≥–∞'],
      color: '#20b2aa',
      bgGradient: 'linear-gradient(135deg, #20b2aa, #48cae4)'
    },
    { 
      title: '–ò–ò –ê–Ω–∏–º–∞—Ü–∏—è', 
      icon: 'ü§ñ', 
      description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–≤–Ω—É—é, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é', 
      time: '1 —á–∞—Å', 
      saved: '90%', 
      details: ['–ù–µ–π—Ä–æ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥', '–°–∏–Ω—Ç–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è', '–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è'],
      color: '#ff7f50',
      bgGradient: 'linear-gradient(135deg, #ff7f50, #ff9a76)'
    },
    { 
      title: '–£–ª—É—á—à–µ–Ω–∏–µ', 
      icon: '‚ö°', 
      description: '–ò–ò —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏', 
      time: '30 –º–∏–Ω', 
      saved: '85%', 
      details: ['–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞', '–¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è', '–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤'],
      color: '#9d4edd',
      bgGradient: 'linear-gradient(135deg, #9d4edd, #c77dff)'
    },
    { 
      title: '–î–æ—Å—Ç–∞–≤–∫–∞', 
      icon: 'üìä', 
      description: '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 
      time: '15 –º–∏–Ω', 
      saved: '95%', 
      details: ['–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'],
      color: '#06ffa5',
      bgGradient: 'linear-gradient(135deg, #06ffa5, #39ff14)'
    }
  ];

  const teamMembers = [
    {
      name: '–ê–ª–µ–∫—Å–µ–π –ß–µ–Ω',
      role: '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ò–ò',
      image: 'https://images.unsplash.com/photo-1637722883499-7782c2a64f07',
      expertise: ['–ù–µ–π—Ä–æ–Ω–Ω—ã–µ –°–µ—Ç–∏', '–ú–æ—É—à–Ω –î–∏–∑–∞–π–Ω'],
      experience: '8 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      name: '–ú–∞—Ä–∏—è –†–æ–¥—Ä–∏–≥–µ—Å',
      role: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
      image: 'https://images.unsplash.com/photo-1634794251656-9f286d822b05',
      expertise: ['–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ò–ò –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'],
      experience: '6 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      name: '–î–∞–≤–∏–¥ –ö–∏–º',
      role: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
      image: 'https://images.unsplash.com/photo-1637722883499-7782c2a64f07',
      expertise: ['–ú–∞—à–∏–Ω–Ω–æ–µ –û–±—É—á–µ–Ω–∏–µ', '–ê–Ω–∏–º–∞—Ü–∏—è'],
      experience: '10 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      name: '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
      role: '–í–µ–¥—É—â–∏–π –ê–Ω–∏–º–∞—Ç–æ—Ä',
      image: 'https://images.unsplash.com/photo-1634794251656-9f286d822b05',
      expertise: ['3D –ê–Ω–∏–º–∞—Ü–∏—è', '–í–∏–∑—É–∞–ª—å–Ω—ã–µ –≠—Ñ—Ñ–µ–∫—Ç—ã'],
      experience: '7 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      name: '–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤',
      role: '–î–∞—Ç–∞ –°–∞–π–µ–Ω—Ç–∏—Å—Ç',
      image: 'https://images.unsplash.com/photo-1637722883499-7782c2a64f07',
      expertise: ['–ì–ª—É–±–æ–∫–æ–µ –û–±—É—á–µ–Ω–∏–µ', '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –ó—Ä–µ–Ω–∏–µ'],
      experience: '9 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      role: 'UX/UI –î–∏–∑–∞–π–Ω–µ—Ä',
      image: 'https://images.unsplash.com/photo-1634794251656-9f286d822b05',
      expertise: ['–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ò–ò', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –û–ø—ã—Ç'],
      experience: '5 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    }
  ];

  const testimonials = [
    {
      id: 1,
      name: '–°–∞—Ä–∞ –î–∂–æ–Ω—Å–æ–Ω',
      company: '–¢–µ—Ö–ö–æ—Ä–ø –ò–Ω–∫.',
      text: 'Anix AI –ø—Ä–µ–æ–±—Ä–∞–∑–∏–ª –Ω–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ, –∞ —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è.',
      videoThumbnail: 'https://images.unsplash.com/photo-1642406415849-a410b5d01a94',
      videoUrl: 'https://vimeo.com/1078357836/a4d72de864',
      aiGenerated: 82
    },
    {
      id: 2,
      name: '–ú–∏—Ö–∞–∏–ª –ë—Ä–∞—É–Ω',
      company: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –°—Ç—É–¥–∏–∏',
      text: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞. –ù–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 300%.',
      videoThumbnail: 'https://images.unsplash.com/photo-1546358789-12e9019c9e84',
      videoUrl: 'https://vimeo.com/1078354208?share=copy',
      aiGenerated: 89
    }
  ];

  const awards = [
    { title: '–¢–û–ü-25 –ø—Ä–æ–µ–∫—Ç–æ–≤ –∞–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä–∞ 2024', category: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏', year: '2024' },
    { title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"', category: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', year: '2024' },
    { title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ "–ú–µ–Ω—è—é—â–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"', category: '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ', year: '2024' },
    { title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞', category: '–ê–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä', year: '2024' },
    { title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏', category: '–û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', year: '2023' }
  ];

  const pricingPackages = {
    '–°—Ç–∞—Ä—Ç–∞–ø—ã': [
      { name: 'Meaty Script', price: '100K‚ÇΩ', details: ['‚ö° 5 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏', 'üéØ –û–¥–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è', 'üìù –°—Ü–µ–Ω–∞—Ä–∏–π –≤–∫–ª—é—á–µ–Ω'] },
      { name: 'Explain in 30s', price: '250K‚ÇΩ', details: ['‚ö° 7 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏', 'üéØ –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π', 'üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏'] },
      { name: 'Content Start', price: '450K‚ÇΩ', details: ['‚ö° 10 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'üéØ –ë—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–π –ø–∞–∫–µ—Ç', 'üé¨ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤'] }
    ],
    '–°—Ä–µ–¥–Ω–∏–π –ë–∏–∑–Ω–µ—Å': [
      { name: 'Full Production', price: '500K‚ÇΩ', details: ['‚ö° 14 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', 'üéØ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'üé® –ü—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω'] },
      { name: 'Result Series', price: '650K‚ÇΩ', details: ['‚ö° 21 –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ROI', 'üéØ –°–µ—Ä–∏–π–Ω—ã–π –ø–∞–∫–µ—Ç', 'üîÑ –ü—Ä–∞–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã'] },
      { name: 'Feed Content', price: '720K‚ÇΩ', details: ['‚ö° 30 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏', 'üéØ –ö–æ–Ω—Ç–µ–Ω—Ç-–∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'üì± –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã'] }
    ],
    '–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏': [
      { name: 'Content System', price: '1.5M‚ÇΩ', details: ['‚ö° 45 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'üéØ –ë—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞', 'üë• –û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã'] },
      { name: 'In-House Team', price: '5M‚ÇΩ', details: ['‚ö° 90 –¥–Ω–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', 'üìä –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'üéØ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'üõ†Ô∏è –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'] },
      { name: 'Court Viz', price: '1.75M‚ÇΩ', details: ['‚ö° 60 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞', 'üìä –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', 'üéØ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å—É–¥–∞', 'üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] }
    ]
  };

  const faqData = [
    {
      question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò-–∞–Ω–∏–º–∞—Ü–∏—è?',
      answer: '–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏. –ò–ò –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
    },
    {
      question: '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏?',
      answer: '–ë–ª–∞–≥–æ–¥–∞—Ä—è –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –º—ã —Å–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ 90%. –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≥–æ—Ç–æ–≤—ã –∑–∞ 5 –¥–Ω–µ–π, —Å–ª–æ–∂–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è - –∑–∞ 45-90 –¥–Ω–µ–π. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±—ã –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.'
    },
    {
      question: '–ú–æ–∂–Ω–æ –ª–∏ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏ –≤ –≥–æ—Ç–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é?',
      answer: '–î–∞! –ò–ò –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º 3 —Ä–∞—É–Ω–¥–∞ –ø—Ä–∞–≤–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.'
    },
    {
      question: '–ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ?',
      answer: '–ú—ã —Å–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: MP4, GIF, WebM –¥–ª—è –≤–µ–±–∞, –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.'
    },
    {
      question: '–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ –¥–ª—è –º–æ–µ–π –æ—Ç—Ä–∞—Å–ª–∏?',
      answer: '–ò–ò-–∞–Ω–∏–º–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞! –ú—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏–∑ IT, —Ñ–∏–Ω–∞–Ω—Å–æ–≤, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, e-commerce –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —Å—Ñ–µ—Ä. –ò–ò –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ª—é–±–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.'
    }
  ];

  const redirectToTelegram = () => {
    window.open('https://t.me/anix_helper', '_blank');
  };

  const generateQRCode = () => {
    return `https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=https://t.me/anix_helper`;
  };

  const scrollAwards = (direction) => {
    if (awardsScrollRef.current) {
      const scrollAmount = 300;
      awardsScrollRef.current.scrollBy({
        left: direction === 'left' ? -scrollAmount : scrollAmount,
        behavior: 'smooth'
      });
    }
  };

  useEffect(() => {
    setTimeout(() => setIsLoading(false), 1500);
  }, []);

  if (isLoading) {
    return (
      <div className="loading-screen">
        <div className="loading-content">
          <div className="neural-loader">
            <div className="neural-pulse"></div>
            <div className="neural-pulse"></div>
            <div className="neural-pulse"></div>
          </div>
          <h2 className="loading-text">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π...</h2>
        </div>
      </div>
    );
  }

  return (
    <div className="anix-landing">
      {/* Neural Network Particles Background */}
      <canvas ref={particlesRef} className="particles-canvas" />
      
      {/* Hero Section */}
      <section ref={heroRef} className="hero-section">
        <div className="hero-background">
          <img src="https://images.pexels.com/photos/5475810/pexels-photo-5475810.jpeg" alt="AI Technology" className="hero-bg-image" />
          <div className="hero-overlay"></div>
        </div>
        
        <div className="hero-content">
          <div className="logo-container">
            <img src="https://github.com/user-attachments/assets/1c4ee8a8-ffc8-43fe-b830-8ab71e326ec3" alt="Anix Logo" className="anix-logo" />
          </div>
          
          <h1 className="hero-title">
            <span className="title-line">–°–æ–∑–¥–∞—ë–º</span>
            <span className="title-line glow-text">–ò–ò-–ê–Ω–∏–º–∞—Ü–∏–∏</span>
            <span className="title-line">–ù–æ–≤–æ–≥–æ –£—Ä–æ–≤–Ω—è</span>
          </h1>
          <p className="hero-subtitle">
            –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∞—à–µ –≤–∏–¥–µ–Ω–∏–µ –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞ –¥–Ω–∏, –∞ –Ω–µ –º–µ—Å—è—Ü—ã.
          </p>
          <button className="cta-button primary" onClick={redirectToTelegram}>
            <span>–°–æ–∑–¥–∞—Ç—å –ò–ò-–ê–Ω–∏–º–∞—Ü–∏—é</span>
            <div className="button-glow"></div>
          </button>
        </div>
        
        <div className="geometric-shapes">
          <div className="floating-shape shape-1"></div>
          <div className="floating-shape shape-2"></div>
          <div className="floating-shape shape-3"></div>
        </div>
      </section>

      {/* Services Section */}
      <section className="services-section">
        <div className="container">
          <h2 className="section-title">–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –ê–Ω–∏–º–∞—Ü–∏–∏</h2>
          <div className="services-grid">
            <div className="service-card">
              <div className="service-icon">üé¨</div>
              <h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò</h3>
              <p>–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å–æ–∑–¥–∞—é—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π</p>
              <div className="service-overlay">
                <div className="case-study">
                  <h4>–ö–µ–π—Å: –ö–∞–º–ø–∞–Ω–∏—è Nike</h4>
                  <p>–°–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞ 85%</p>
                  <div className="metrics">
                    <span>ROI: 340%</span>
                    <span>–í—Ä–µ–º—è: 2 –Ω–µ–¥–µ–ª–∏ ‚Üí 2 –¥–Ω—è</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="service-card">
              <div className="service-icon">‚ö°</div>
              <h3>–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –†–µ–Ω–¥–µ—Ä–∏–Ω–≥</h3>
              <p>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è</p>
              <div className="service-overlay">
                <div className="case-study">
                  <h4>–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞: –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–∞</h4>
                  <p>–°–æ–∑–¥–∞–ª–∏ 50 –∞–Ω–∏–º–∞—Ü–∏–π –∑–∞ 1 –¥–µ–Ω—å</p>
                  <div className="metrics">
                    <span>–°–∫–æ—Ä–æ—Å—Ç—å: –≤ 10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ</span>
                    <span>–ö–∞—á–µ—Å—Ç–≤–æ: 4K HDR</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="service-card">
              <div className="service-icon">üé®</div>
              <h3>–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç</h3>
              <p>–ò–ò –ø–æ–Ω–∏–º–∞–µ—Ç —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã</p>
              <div className="service-overlay">
                <div className="case-study">
                  <h4>–ö–ª–∏–µ–Ω—Ç: Fortune 500</h4>
                  <p>100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—Ä–µ–Ω–¥—É –≤ 200+ –∞–∫—Ç–∏–≤–∞—Ö</p>
                  <div className="metrics">
                    <span>–¢–æ—á–Ω–æ—Å—Ç—å: 99.7%</span>
                    <span>–û–¥–æ–±—Ä–µ–Ω–∏–µ: –° –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Team Section */}
      <section className="team-section">
        <div className="container">
          <h2 className="section-title">–≠–∫—Å–ø–µ—Ä—Ç—ã –ø–æ –ù–µ–π—Ä–æ–Ω–Ω—ã–º –°–µ—Ç—è–º</h2>
          <div className="team-grid">
            {teamMembers.map((member, index) => (
              <div key={index} className="team-card">
                <div className="team-image-container">
                  <img src={member.image} alt={member.name} className="team-image" />
                  <div className="team-overlay">
                    <div className="expertise-badges">
                      {member.expertise.map((skill, i) => (
                        <span key={i} className="expertise-badge pulse-effect">
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
                <div className="team-info">
                  <h3>{member.name}</h3>
                  <p className="role">{member.role}</p>
                  <p className="experience">{member.experience}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Completely Redesigned Process Timeline */}
      <section ref={processRef} className="process-section-v2">
        <div className="container">
          <h2 className="section-title">–ù–∞—à –ò–ò –ü—Ä–æ—Ü–µ—Å—Å</h2>
          <div className="process-subtitle">
            –ü–æ—à–∞–≥–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞—à–∏—Ö –∏–¥–µ–π –≤ –ø–æ—Ç—Ä—è—Å–∞—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
          </div>
          
          <div className="process-workspace">
            {/* Central AI Brain */}
            <div className="ai-brain-container">
              <div className={`ai-brain ${processInView ? 'active' : ''}`}>
                <div className="brain-core"></div>
                <div className="brain-waves">
                  {Array.from({length: 6}).map((_, i) => (
                    <div key={i} className={`wave wave-${i + 1}`}></div>
                  ))}
                </div>
                <div className="brain-particles">
                  {Array.from({length: 12}).map((_, i) => (
                    <div key={i} className={`particle particle-${i + 1}`}></div>
                  ))}
                </div>
              </div>
            </div>

            {/* Process Steps in Circle */}
            <div className="process-circle">
              {processSteps.map((step, index) => (
                <div
                  key={index}
                  className={`process-step-v2 step-${index + 1} ${index <= currentStep ? 'active' : ''} ${index === currentStep ? 'current' : ''}`}
                  style={{
                    '--step-color': step.color,
                    '--step-gradient': step.bgGradient,
                    '--step-delay': `${index * 0.3}s`
                  }}
                >
                  <div className="step-orbit">
                    <div className="step-node">
                      <div className="step-icon-wrapper">
                        <span className="step-icon">{step.icon}</span>
                      </div>
                      <div className="step-number">{index + 1}</div>
                    </div>
                  </div>
                  
                  <div className="step-info-panel">
                    <div className="step-info-content">
                      <h3 className="step-title">{step.title}</h3>
                      <p className="step-description">{step.description}</p>
                      
                      <div className="step-metrics">
                        <div className="metric-item">
                          <span className="metric-label">–í—Ä–µ–º—è:</span>
                          <span className="metric-value">{step.time}</span>
                        </div>
                        <div className="metric-item">
                          <span className="metric-label">–≠–∫–æ–Ω–æ–º–∏—è:</span>
                          <span className="metric-value saved">{step.saved}</span>
                        </div>
                      </div>
                      
                      <div className="step-progress">
                        <div className="progress-bar">
                          <div 
                            className="progress-fill" 
                            style={{width: index <= currentStep ? step.saved : '0%'}}
                          ></div>
                        </div>
                      </div>
                      
                      <div className="step-features">
                        {step.details.map((detail, i) => (
                          <div key={i} className="feature-tag" style={{'--delay': `${i * 0.1}s`}}>
                            {detail}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  {/* Connection Line to AI Brain */}
                  <div className="connection-line">
                    <div className="line-core"></div>
                    <div className="line-pulse"></div>
                  </div>
                </div>
              ))}
            </div>

            {/* Process Flow Visualization */}
            <div className="process-flow">
              {processSteps.map((step, index) => (
                <div key={index} className={`flow-step ${index <= currentStep ? 'active' : ''}`}>
                  <div className="flow-dot"></div>
                  {index < processSteps.length - 1 && (
                    <div className="flow-connector">
                      <div className="connector-line"></div>
                      <div className="connector-arrow">‚Üí</div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
          
          <div className="metrics-display">
            <div className="metric-item">
              <div className="metric-number">{counters.projects}+</div>
              <div className="metric-label">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ü—Ä–æ–µ–∫—Ç–æ–≤</div>
            </div>
            <div className="metric-item">
              <div className="metric-number">{counters.hours}+</div>
              <div className="metric-label">–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö –ß–∞—Å–æ–≤</div>
            </div>
          </div>
        </div>
      </section>

      {/* Pricing & Packages Section */}
      <section className="pricing-section">
        <div className="container">
          <h2 className="section-title">–¶–µ–Ω—ã –∏ –ü–∞–∫–µ—Ç—ã</h2>
          
          <div className="pricing-grid">
            {Object.entries(pricingPackages).map(([category, packages]) => (
              <div key={category} className="pricing-column">
                <div className="column-header">
                  <h3>{category}</h3>
                  <div className="column-subtitle">
                    {category === '–°—Ç–∞—Ä—Ç–∞–ø—ã' && '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞'}
                    {category === '–°—Ä–µ–¥–Ω–∏–π –ë–∏–∑–Ω–µ—Å' && '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —É—Å—Ç–æ—è–≤—à–∏—Ö—Å—è –∫–æ–º–ø–∞–Ω–∏–π'}
                    {category === '–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏' && '–†–µ—à–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è'}
                  </div>
                </div>
                
                <div className="packages-list">
                  {packages.map((pkg, index) => (
                    <div key={index} className="package-card">
                      <div className="package-header">
                        <h4>{pkg.name}</h4>
                        <div className="package-price">{pkg.price}</div>
                      </div>
                      
                      <button 
                        className="details-button"
                        onClick={() => setExpandedPackage(
                          expandedPackage === `${category}-${index}` ? null : `${category}-${index}`
                        )}
                      >
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ {expandedPackage === `${category}-${index}` ? '‚àí' : '+'}
                      </button>
                      
                      <div className={`package-details ${expandedPackage === `${category}-${index}` ? 'expanded' : ''}`}>
                        <div className="details-content">
                          {pkg.details.map((detail, i) => (
                            <div key={i} className="detail-item">{detail}</div>
                          ))}
                        </div>
                      </div>
                      
                      <button className="package-cta" onClick={redirectToTelegram}>
                        –ù–∞—á–∞—Ç—å
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="testimonials-section">
        <div className="container">
          <h2 className="section-title">–ò—Å—Ç–æ—Ä–∏–∏ –£—Å–ø–µ—Ö–∞ –ö–ª–∏–µ–Ω—Ç–æ–≤</h2>
          <div className="testimonials-grid">
            {testimonials.map((testimonial) => (
              <div key={testimonial.id} className="testimonial-card">
                <div className="video-preview" onClick={() => {
                  setSelectedVideo(testimonial);
                  setShowVideoModal(true);
                }}>
                  <img src={testimonial.videoThumbnail} alt="–ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ" />
                  <div className="video-play-button">
                    <div className="play-icon">‚ñ∂</div>
                  </div>
                  <div className="ai-indicator">
                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò: {testimonial.aiGenerated}%
                  </div>
                </div>
                <div className="testimonial-content">
                  <p>"{testimonial.text}"</p>
                  <div className="testimonial-author">
                    <strong>{testimonial.name}</strong>
                    <span>{testimonial.company}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Enhanced Awards Section */}
      <section className="awards-section">
        <div className="container">
          <h2 className="section-title">–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –ò–Ω–¥—É—Å—Ç—Ä–∏–∏</h2>
          
          <div className="awards-scroll-container">
            <button className="scroll-button left" onClick={() => scrollAwards('left')}>
              ‚óÄ
            </button>
            
            <div className="awards-scroll" ref={awardsScrollRef}>
              {awards.map((award, index) => (
                <div key={index} className="award-card">
                  <div className="award-trophy">
                    <img src="https://images.unsplash.com/photo-1633904275835-4e0e2b7e0a49" alt="–ù–∞–≥—Ä–∞–¥–∞" />
                    <div className="trophy-glow"></div>
                  </div>
                  <div className="award-info">
                    <h3>{award.title}</h3>
                    <p className="award-category">{award.category}</p>
                    <span className="award-year">{award.year}</span>
                  </div>
                </div>
              ))}
            </div>
            
            <button className="scroll-button right" onClick={() => scrollAwards('right')}>
              ‚ñ∂
            </button>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="faq-section">
        <div className="container">
          <h2 className="section-title">–ß–∞—Å—Ç–æ –ó–∞–¥–∞–≤–∞–µ–º—ã–µ –í–æ–ø—Ä–æ—Å—ã</h2>
          <div className="faq-list">
            {faqData.map((faq, index) => (
              <div key={index} className="faq-item">
                <button 
                  className={`faq-question ${activeFAQ === index ? 'active' : ''}`}
                  onClick={() => setActiveFAQ(activeFAQ === index ? null : index)}
                >
                  <span>{faq.question}</span>
                  <div className="faq-icon">{activeFAQ === index ? '‚àí' : '+'}</div>
                </button>
                <div className={`faq-answer ${activeFAQ === index ? 'expanded' : ''}`}>
                  <div className="faq-answer-content">
                    <p>{faq.answer}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section className="contact-section">
        <div className="container">
          <h2 className="section-title">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ù–∞–º–∏</h2>
          <div className="contact-grid">
            <div className="contact-info">
              <h3>–ì–æ—Ç–æ–≤—ã —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∞–Ω–∏–º–∞—Ü–∏—é?</h3>
              <p>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!</p>
              
              <div className="contact-methods">
                <div className="contact-method">
                  <div className="contact-icon">üìû</div>
                  <div className="contact-details">
                    <strong>–¢–µ–ª–µ—Ñ–æ–Ω</strong>
                    <a href="tel:+79770890309">+7(977)-089-03-09</a>
                  </div>
                </div>
                
                <div className="contact-method">
                  <div className="contact-icon">‚úâÔ∏è</div>
                  <div className="contact-details">
                    <strong>Email</strong>
                    <a href="mailto:anix.ai@yandex.ru">anix.ai@yandex.ru</a>
                  </div>
                </div>
                
                <div className="contact-method">
                  <div className="contact-icon">‚úàÔ∏è</div>
                  <div className="contact-details">
                    <strong>Telegram</strong>
                    <a href="https://t.me/anix_helper" target="_blank" rel="noopener noreferrer">@anix_helper</a>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="contact-visual">
              <div className="contact-animation">
                <div className="floating-elements">
                  <div className="element element-1">üé¨</div>
                  <div className="element element-2">ü§ñ</div>
                  <div className="element element-3">‚ö°</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Blog Section */}
      <section className="blog-section">
        <div className="container">
          <h2 className="section-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ù–æ–≤–æ—Å—Ç–∏</h2>
          <div className="blog-grid">
            <article className="blog-card">
              <div className="blog-category">
                <span className="category-tag">#–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏–ê–Ω–∏–º–∞—Ü–∏–∏</span>
              </div>
              <h3>–ë—É–¥—É—â–µ–µ –ò–ò-–∞–Ω–∏–º–∞—Ü–∏–∏: –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤</h3>
              <p>–ò—Å—Å–ª–µ–¥—É–µ–º, –∫–∞–∫ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É—é—Ç –∏–Ω–¥—É—Å—Ç—Ä–∏—é –∞–Ω–∏–º–∞—Ü–∏–∏...</p>
              <div className="blog-meta">
                <span>5 –º–∏–Ω —á—Ç–µ–Ω–∏—è</span>
                <span>–î–µ–∫ 2024</span>
              </div>
            </article>
            
            <article className="blog-card">
              <div className="blog-category">
                <span className="category-tag">#–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏–ê–Ω–∏–º–∞—Ü–∏–∏</span>
              </div>
              <h3>–ö–µ–π—Å: –ö–∞–∫ –º—ã —Å–æ–∫—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ 90%</h3>
              <p>–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—à–µ–≥–æ –ò–ò-–∫–æ–Ω–≤–µ–π–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</p>
              <div className="blog-meta">
                <span>8 –º–∏–Ω —á—Ç–µ–Ω–∏—è</span>
                <span>–ù–æ—è 2024</span>
              </div>
            </article>
          </div>
        </div>
      </section>

      {/* Floating Telegram Button */}
      <div 
        className="floating-telegram"
        onMouseEnter={() => setShowQRCode(true)}
        onMouseLeave={() => setShowQRCode(false)}
        onClick={redirectToTelegram}
      >
        <div className="telegram-icon">‚úà</div>
        <span>–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</span>
        <div className="telegram-glow"></div>
        
        {showQRCode && (
          <div className="qr-modal">
            <img src={generateQRCode()} alt="QR-–∫–æ–¥ Telegram" />
            <p>–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è —Å–≤—è–∑–∏</p>
          </div>
        )}
      </div>

      {/* Video Modal */}
      {showVideoModal && (
        <div className="video-modal-overlay" onClick={() => setShowVideoModal(false)}>
          <div className="video-modal" onClick={(e) => e.stopPropagation()}>
            <button className="modal-close" onClick={() => setShowVideoModal(false)}>√ó</button>
            {selectedVideo && (
              <div className="modal-content">
                <iframe
                  src={selectedVideo.videoUrl}
                  width="100%"
                  height="400"
                  frameBorder="0"
                  allow="autoplay; fullscreen; picture-in-picture"
                  allowFullScreen
                  title={`–í–∏–¥–µ–æ –æ—Ç ${selectedVideo.name}`}
                ></iframe>
                <div className="progress-bar-container">
                  <div className="progress-label">–ö–æ–Ω—Ç–µ–Ω—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò</div>
                  <div className="progress-bar">
                    <div 
                      className="progress-fill" 
                      style={{width: `${selectedVideo.aiGenerated}%`}}
                    ></div>
                  </div>
                  <div className="progress-percentage">{selectedVideo.aiGenerated}%</div>
                </div>
                <div className="modal-info">
                  <h3>{selectedVideo.name}</h3>
                  <p>{selectedVideo.company}</p>
                  <p>"{selectedVideo.text}"</p>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default AnixAILanding;
