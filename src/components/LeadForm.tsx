import React from 'react';
import { CONFIG } from '../config';
import { postJson, trackEvent } from '../lib/net';

export default function LeadForm() {
  const [email, setEmail] = React.useState('');
  const [position, setPosition] = React.useState('');
  const [telegram, setTelegram] = React.useState('');
  const [consent, setConsent] = React.useState(false);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);

  const onSubmit: React.FormEventHandler = async (e) => {
    e.preventDefault();
    setError(null);
    if (!CONFIG.SUBMIT_LEAD_URL) {
      setError('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã.');
      return;
    }
    if (!consent) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.');
      return;
    }

    setLoading(true);
    try {
      const utm = Object.fromEntries(
        new URLSearchParams(window.location.search)
      );
      const referrer = document.referrer || null;
      const pathname = window.location.pathname;

      await postJson(CONFIG.SUBMIT_LEAD_URL, {
        email,
        position,
        telegram,
        consent,
        utm,
        referrer,
        pathname,
      });

      alert('–ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É!');
      setEmail('');
      setPosition('');
      setTelegram('');
      setConsent(false);
    } catch (e: any) {
      const code = e?.message;
      const detail = e?.detail;
      let msg = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É.';
      if (code === 'timeout') msg = '–°–µ—Ä–≤–µ—Ä –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.';
      if (code === 'resend_error')
        msg =
          '–ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram ‚Äî –ø—Ä–∏—à–ª—ë–º –≤—Ä—É—á–Ω—É—é.';
      setError(detail ? `${msg} (${detail})` : msg);
      await trackEvent(CONFIG.TRACK_EVENT_URL, {
        type: 'form_error',
        code,
        detail,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={onSubmit} className="space-y-4">
      <div>
        <label className="block text-sm mb-1" htmlFor="email">
          Email*
        </label>
        <input
          id="email"
          type="email"
          value={email}
          required
          onChange={(e) => setEmail(e.target.value)}
          className="w-full px-3 py-2 rounded bg-anix-dark border border-gray-600 text-white"
        />
      </div>
      <div>
        <label className="block text-sm mb-1" htmlFor="position">
          –î–æ–ª–∂–Ω–æ—Å—Ç—å*
        </label>
        <input
          id="position"
          value={position}
          required
          onChange={(e) => setPosition(e.target.value)}
          className="w-full px-3 py-2 rounded bg-anix-dark border border-gray-600 text-white"
        />
      </div>
      <div>
        <label className="block text-sm mb-1" htmlFor="telegram">
          Telegram*
        </label>
        <input
          id="telegram"
          value={telegram}
          required
          onChange={(e) => setTelegram(e.target.value)}
          className="w-full px-3 py-2 rounded bg-anix-dark border border-gray-600 text-white"
        />
      </div>
      <div className="flex items-center">
        <input
          id="consent"
          type="checkbox"
          checked={consent}
          onChange={(e) => setConsent(e.target.checked)}
          className="mr-2"
          required
        />
        <label htmlFor="consent" className="text-sm">
          –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        </label>
      </div>
      <div className="space-y-1">
        <button
          type="submit"
          disabled={loading}
          className="w-full bg-anix-purple hover:bg-anix-teal text-white py-2 rounded transition-colors disabled:opacity-50"
        >
          {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì© –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –≤ Telegram'}
        </button>
        {error && (
          <div className="mt-2 text-center text-sm text-white" role="status">
            {error}
          </div>
        )}
        <p className="text-sm text-[#B0B0B0] text-center">
          –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–∏–¥—ë—Ç –≤ Telegram, –∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ä–∞–∑–±–µ—Ä—ë–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏.
        </p>
      </div>
    </form>
  );
}
