import React, { useState } from 'react';
import { supabase } from '../supabaseClient';

const RESEND_API_KEY = 're_ATrQ5hQa_8i8yxvW2a3U3mwxgNHNzcY2p';

const sendChecklistEmail = async (email) => {
  const htmlContent = `
<h2>üéØ –ö–∞–∫ explainer-–≤–∏–¥–µ–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å B2B-–ø—Ä–æ–¥—É–∫—Ç—ã</h2>

<p><b>üìÑ –í–∞—à —á–µ–∫-–ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å:</b><br/>
üëâ <a href="https://studio.anix-ai.pro/checklist.pdf">–°–∫–∞—á–∞—Ç—å PDF</a></p>

<p><b>üöÄ –ö–µ–π—Å 1: SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è HR</b><br/>
–í–∏–¥–µ–æ –ø–æ–º–æ–≥–ª–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ —Å 1,2% –¥–æ 1,66%<br/>
<strong>–ü–æ—á–µ–º—É:</strong> –ª—é–¥–∏ –Ω–∞—á–∞–ª–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –≤ –ø–µ—Ä–≤—ã–µ 30 —Å–µ–∫.</p>

<p><b>üõ† –ö–µ–π—Å 2: –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ü–û</b><br/>
–í–∏–¥–µ–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äî –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞ —É–¥–≤–æ–∏–ª–∏—Å—å<br/>
<strong>–ü–æ—á–µ–º—É:</strong> –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å—Ç–∞–ª–∏ –º–µ–Ω—å—à–µ –æ–±—ä—è—Å–Ω—è—Ç—å, –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å</p>

<p><a href="https://studio.anix-ai.pro#cases">‚Üí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ –∫–µ–π—Å–æ–≤</a></p>

<hr/>

<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br/>
–ö–æ–º–∞–Ω–¥–∞ Anix<br/>
<a href="https://anix-ai.pro">anix-ai.pro</a> | hello@anix-ai.pro</p>`;

  try {
    await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${RESEND_API_KEY}`,
      },
      body: JSON.stringify({
        from: 'hello@anix-ai.pro',
        to: email,
        subject: '–í–∞—à —á–µ–∫-–ª–∏—Å—Ç –ø–æ explainer-–≤–∏–¥–µ–æ + 2 –∫–µ–π—Å–∞',
        html: htmlContent,
      }),
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email', err);
  }
};

const LeadForm = ({ onSuccess }) => {
  const [formData, setFormData] = useState({
    email: '',
    position: '',
    telegram: '',
    consent: false,
  });
  const [submitted, setSubmitted] = useState(false);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.email || !formData.position || !formData.consent) return;

    const { email, position, telegram } = formData;
    const { error } = await supabase.from('leads').insert([
      {
        email,
        position,
        telegram,
        created_at: new Date().toISOString(),
      },
    ]);

    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    } else {
      await sendChecklistEmail(email);
      setSubmitted(true);
      onSuccess && onSuccess();
      alert('–°–ø–∞—Å–∏–±–æ! –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É.');
    }
  };

  if (submitted) {
    return (
      <p className="text-center text-green-400">
        –°–ø–∞—Å–∏–±–æ! –ß–µ–∫-–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É.
      </p>
    );
  }

  return (
    <>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm mb-1" htmlFor="email">
            Email*
          </label>
          <input
            id="email"
            name="email"
            type="email"
            required
            value={formData.email}
            onChange={handleChange}
            className="w-full px-3 py-2 rounded bg-anix-dark border border-gray-600 text-white"
          />
        </div>
        <div>
          <label className="block text-sm mb-1" htmlFor="position">
            –î–æ–ª–∂–Ω–æ—Å—Ç—å*
          </label>
          <input
            id="position"
            name="position"
            required
            value={formData.position}
            onChange={handleChange}
            className="w-full px-3 py-2 rounded bg-anix-dark border border-gray-600 text-white"
          />
        </div>
        <div>
          <label className="block text-sm mb-1" htmlFor="telegram">
            Telegram
          </label>
          <input
            id="telegram"
            name="telegram"
            value={formData.telegram}
            onChange={handleChange}
            className="w-full px-3 py-2 rounded bg-anix-dark border border-gray-600 text-white"
          />
        </div>
        <div className="flex items-center">
          <input
            id="consent"
            name="consent"
            type="checkbox"
            required
            checked={formData.consent}
            onChange={handleChange}
            className="mr-2"
          />
          <label htmlFor="consent" className="text-sm">
            –Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          </label>
        </div>
        <div className="space-y-1">
          <button
            type="submit"
            className="w-full bg-anix-purple hover:bg-anix-teal text-white py-2 rounded transition-colors"
          >
            üì© –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –≤ Telegram
          </button>
          <p className="text-sm text-[#B0B0B0] text-center">
            –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–∏–¥—ë—Ç –≤ Telegram, –∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ä–∞–∑–±–µ—Ä—ë–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å
            –≤–∞–º–∏.
          </p>
        </div>
      </form>
      <a
        href="#"
        className="block text-center text-xs text-gray-400 underline mt-2"
      >
        –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
      </a>
    </>
  );
};

export default LeadForm;
